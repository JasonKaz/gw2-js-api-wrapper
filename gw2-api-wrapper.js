// Generated by CoffeeScript 1.6.2
var checkValidLanguage, colors, eventNames, gameBuild, getBuildID, getColorOnMaterial, getColors, getEventName, getEventNames, getEvents, getGuildDetails, getItemDetails, getItems, getMapName, getMapNames, getMatchDetails, getObjectiveName, getObjectiveNames, getRecipeDetails, getRecipes, getWorldName, getWorldNames, getWvwMatches, items, mapNames, objectiveNames, recipes, worldNames, wvwMatches;

worldNames = mapNames = eventNames = objectiveNames = items = recipes = colors = wvwMatches = gameBuild = null;

getEvents = function(worldID, mapID, eventID) {
  var data;

  if (worldID == null) {
    worldID = 1001;
  }
  if (mapID == null) {
    mapID = 0;
  }
  if (eventID == null) {
    eventID = 0;
  }
  data = {};
  $.ajax({
    url: "https://api.guildwars2.com/v1/events.json",
    type: "get",
    dataType: "json",
    async: false,
    data: {
      world_id: worldID,
      map_id: mapID,
      event_id: eventID
    }
  }).done(function(d) {
    return data = d;
  });
  return data;
};

checkValidLanguage = function(language) {
  return ["en", "fr", "de", "es"].indexOf(language) > -1;
};

getWorldNames = function(language) {
  if (language == null) {
    language = "en";
  }
  if (checkValidLanguage(language)) {
    if (!worldNames) {
      $.ajax({
        url: "https://api.guildwars2.com/v1/world_names.json",
        type: "get",
        dataType: "json",
        async: false,
        data: {
          lang: language
        }
      }).done(function(d) {
        return worldNames = d;
      });
    }
    return worldNames;
  }
  return false;
};

getWorldName = function(worldID, language) {
  var i, _i, _len, _ref;

  if (language == null) {
    language = "en";
  }
  if (checkValidLanguage(language)) {
    worldID = worldID.toString();
    _ref = getWorldNames(language);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      if (i.id === worldID) {
        return i.name;
      }
    }
    return false;
  }
  return false;
};

getMapNames = function(language) {
  if (language == null) {
    language = "en";
  }
  if (checkValidLanguage(language)) {
    if (!mapNames) {
      $.ajax({
        url: "https://api.guildwars2.com/v1/map_names.json",
        type: "get",
        dataType: "json",
        async: false,
        data: {
          lang: language
        }
      }).done(function(d) {
        return mapNames = d;
      });
    }
    return mapNames;
  }
};

false;

getMapName = function(mapID, language) {
  var i, _i, _len, _ref;

  if (language == null) {
    language = "en";
  }
  if (checkValidLanguage(language)) {
    mapID = mapID.toString();
    _ref = getMapNames(language);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      if (i.id === mapID) {
        return i.name;
      }
    }
    return false;
  }
  return false;
};

getEventNames = function(language) {
  if (language == null) {
    language = "en";
  }
  if (checkValidLanguage(language)) {
    if (!eventNames) {
      $.ajax({
        url: "https://api.guildwars2.com/v1/event_names.json",
        type: "get",
        dataType: "json",
        async: false,
        data: {
          lang: language
        }
      }).done(function(d) {
        return eventNames = d;
      });
    }
    return eventNames;
  }
};

false;

getEventName = function(eventID, language) {
  var i, _i, _len, _ref;

  if (language == null) {
    language = "en";
  }
  if (checkValidLanguage(language)) {
    _ref = getEventNames(language);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      if (i.id === eventID) {
        return i.name;
      }
    }
    return false;
  }
  return false;
};

getWvwMatches = function() {
  if (!wvwMatches) {
    $.ajax({
      url: "https://api.guildwars2.com/v1/wvw/matches.json",
      type: "get",
      dataType: "json",
      async: false
    }).done(function(d) {
      return wvwMatches = d;
    });
    return wvwMatches.wvw_matches;
  }
};

getObjectiveNames = function(language) {
  if (language == null) {
    language = "en";
  }
  if (checkValidLanguage(language)) {
    if (!objectiveNames) {
      $.ajax({
        url: "https://api.guildwars2.com/v1/wvw/objective_names.json",
        type: "get",
        dataType: "json",
        async: false,
        data: {
          lang: language
        }
      }).done(function(d) {
        return objectiveNames = d;
      });
    }
    return objectiveNames;
  }
  return false;
};

getObjectiveName = function(objectiveID, language) {
  var i, _i, _len, _ref;

  if (language == null) {
    language = "en";
  }
  if (checkValidLanguage(language)) {
    objectiveID = objectiveID.toString();
    _ref = getObjectiveNames(language);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      if (i.id === objectiveID) {
        return i.name;
      }
    }
    return false;
  }
  return false;
};

getMatchDetails = function(matchID) {
  var data;

  data = null;
  $.ajax({
    url: "https://api.guildwars2.com/v1/wvw/match_details.json",
    type: "get",
    dataType: "json",
    async: false,
    data: {
      match_id: matchID
    }
  }).done(function(d) {
    return data = d;
  });
  return data;
};

getItems = function() {
  if (!items) {
    $.ajax({
      url: "https://api.guildwars2.com/v1/items.json",
      type: "get",
      dataType: "json",
      async: false
    }).done(function(d) {
      return items = d;
    });
  }
  return items;
};

getItemDetails = function(itemID, language) {
  var data;

  if (language == null) {
    language = "en";
  }
  data = null;
  $.ajax({
    url: "https://api.guildwars2.com/v1/item_details.json",
    type: "get",
    dataType: "json",
    async: false,
    data: {
      item_id: itemID,
      lang: language
    }
  }).done(function(d) {
    return data = d;
  });
  return data;
};

getRecipes = function() {
  if (!recipes) {
    $.ajax({
      url: "https://api.guildwars2.com/v1/recipes.json",
      type: "get",
      dataType: "json",
      async: false
    }).done(function(d) {
      return recipes = d;
    });
  }
  return recipes;
};

getRecipeDetails = function(recipeID) {
  var data;

  data = null;
  $.ajax({
    url: "https://api.guildwars2.com/v1/recipe_details.json",
    type: "get",
    dataType: "json",
    async: false,
    data: {
      recipe_id: recipeID
    }
  }).done(function(d) {
    return data = d;
  });
  return data;
};

getBuildID = function() {
  var data;

  if (!gameBuild) {
    data = null;
    $.ajax({
      url: "https://api.guildwars2.com/v1/build.json",
      type: "get",
      dataType: "json",
      async: false
    }).done(function(d) {
      return data = d;
    });
    return data.build_id;
  }
};

getGuildDetails = function(name, ID) {
  var data, requestData;

  if (name == null) {
    name = null;
  }
  if (ID == null) {
    ID = null;
  }
  data = null;
  requestData = null;
  if (!name) {
    requestData = {
      guild_id: ID
    };
  }
  if (!ID) {
    requestData = {
      guild_name: name
    };
  }
  $.ajax({
    url: "https://api.guildwars2.com/v1/guild_details.json",
    type: "get",
    dataType: "json",
    async: false,
    data: requestData
  }).done(function(d) {
    return data = d;
  });
  return data;
};

getColors = function(language) {
  if (language == null) {
    language = "en";
  }
  if (checkValidLanguage(language)) {
    if (!colors) {
      $.ajax({
        url: "https://api.guildwars2.com/v1/colors.json",
        type: "get",
        dataType: "json",
        async: false,
        data: {
          lang: language
        }
      }).done(function(d) {
        return colors = d.colors;
      });
      return colors;
    }
    return colors;
  }
  return false;
};

getColorOnMaterial = function(colorID, material, language) {
  var bgrVector, brightness, color, contrast, cosHue, hue, lightness, matrix, mult, multHslToRgb, multRgbToHsl, resultRgb, saturation, sinHue, t;

  if (language == null) {
    language = "en";
  }
  if (["cloth", "leather", "metal"].indexOf(material) > -1) {
    if (checkValidLanguage(language)) {
      color = getColors(language)[colorID];
      brightness = color[material].brightness / 128;
      contrast = color[material].contrast;
      hue = (color[material].hue * 3.14159265358979323846) / 180;
      saturation = color[material].saturation;
      lightness = color[material].lightness;
      matrix = Matrix.I(4);
      if (brightness !== 0 || contrast !== 1) {
        t = 128 * (2 * brightness + 1 - contrast);
        mult = $M([[contrast, 0, 0, t], [0, contrast, 0, t], [0, 0, contrast, t], [0, 0, 0, 1]]);
        matrix = mult.x(matrix);
      }
      if (hue !== 0 || saturation !== 1 || lightness !== 1) {
        multRgbToHsl = $M([[0.707107, 0.0, -0.707107, 0], [-0.408248, 0.816497, -0.408248, 0], [0.577350, 0.577350, 0.577350, 0], [0, 0, 0, 1]]);
        matrix = multRgbToHsl.x(matrix);
        cosHue = Math.cos(hue);
        sinHue = Math.sin(hue);
        mult = $M([[cosHue * saturation, sinHue * saturation, 0, 0], [-sinHue * saturation, cosHue * saturation, 0, 0], [0, 0, lightness, 0], [0, 0, 0, 1]]);
        matrix = mult.x(matrix);
        multHslToRgb = $M([[0.707107, -0.408248, 0.577350, 0], [0, 0.816497, 0.577350, 0], [-0.707107, -0.408248, 0.577350, 0], [0, 0, 0, 1]]);
        matrix = multHslToRgb.x(matrix);
      }
      bgrVector = $V([color.base_rgb[2], color.base_rgb[1], color.base_rgb[0], 1]);
      bgrVector = matrix.x(bgrVector);
      resultRgb = [bgrVector.elements[2], bgrVector.elements[1], bgrVector.elements[0]];
      resultRgb[0] = Math.floor(Math.max(0, Math.min(255, resultRgb[0])));
      resultRgb[1] = Math.floor(Math.max(0, Math.min(255, resultRgb[1])));
      resultRgb[2] = Math.floor(Math.max(0, Math.min(255, resultRgb[2])));
      return resultRgb;
    }
  }
  return false;
};
